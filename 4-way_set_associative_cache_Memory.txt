module cache_128(clk,rst,wr,addr,din,dout);
input clk,rst,wr;
input [31:0]addr;
input [127:0]din;
output reg [127:0]dout;
reg [127:0] cha_data [63:0] [3:0];
wire [5:0] index=addr[11:6];
wire [19:0] tag=addr[31:12];
reg [19:0] cha_tag [63:0] [3:0];
reg valid [63:0] [3:0];
integer i,w;
always@(posedge clk or posedge rst)
begin
if(rst)
 begin
 dout<=128'd0;
 for(i=0;i<63;i=i+1)
  begin
  valid[i][0]<=1'd0;
  valid[i][1]<=1'd0;
  valid[i][2]<=1'd0;
  valid[i][3]<=1'd0;
  end
 end 
else
 begin
  if(wr)
   begin
   for(i=0;i<4;i=i+1)
    begin
    if(!valid[index][i])
     w=i;
    end
   cha_data[index][w]<=din;
   cha_tag[index][w]<=tag;
   valid[index][w]<=1'b1;
   end
  else
   begin
   for(i=0;i<4;i=i+1)
   begin
   if(valid[index][i] && cha_tag[index][i]==tag)
    dout=cha_data[index][i]; 
   end
   end 
 end
end
endmodule